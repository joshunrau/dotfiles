#!/usr/bin/env python
#
# TODO - Add support for optimizing music
# TODO - Test if video encoded on Linux with NVIDIA GPU is more performant on Jellyfin server

from __future__ import annotations

import json
import os
import re
import socket
import sys
import threading

from abc import ABC
from argparse import ArgumentParser
from dataclasses import dataclass
from pathlib import Path
import shutil
from subprocess import CalledProcessError, run
from tempfile import mkdtemp
from threading import Thread
from typing import Any, Literal, Type, TypedDict


ARGS: Args
IMAGE_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.webp']
VIDEO_EXTENSIONS = ['.mp4']

Encoding = Literal['H.264', 'H.265', 'UNKNOWN']
LogLevel = Literal['ERROR', 'WARNING', 'LOG', 'VERBOSE']

Address = tuple[str, int]


class Args(TypedDict):
    target: Path
    verbose: bool


@dataclass(kw_only=True)
class BaseVideoInfo(ABC):
    duration_ms: int
    height: int
    width: int


@dataclass(kw_only=True)
class VideoStream(BaseVideoInfo):
    codec_name: str
    codec_long_name: str
    codec_type: Literal['audio', 'video']


@dataclass(kw_only=True)
class VideoInfo(BaseVideoInfo):
    encoding: Encoding
    filepath: Path
    height: int
    width: int


def log(*values: object, level: LogLevel = 'LOG') -> None:
    if level == 'ERROR':
        print(*('\033[91m{}\033[00m'.format(value) for value in values), file=sys.stderr)
    elif level == 'WARNING':
        print(*('\033[93m{}\033[00m'.format(value) for value in values), file=sys.stderr)
    elif level == 'LOG':
        print(*('\033[92m{}\033[00m'.format(value) for value in values))
    elif level == 'VERBOSE' and ARGS['verbose']:
        print(*('\033[97m{}\033[00m'.format(value) for value in values))


def get_property[T](dictionary: dict[str, Any], attr: str, expected_type: Type[T]) -> T:
    value = dictionary.get(attr)
    if not isinstance(value, expected_type):
        actual, expected = value.__class__.__name__, expected_type.__name__
        raise ValueError(f"Unexpected type '{actual}' for attribute '{attr}': expected '{expected}'")
    return value


def parse_args() -> Args:
    parser = ArgumentParser(prog='optimize-media')
    parser.add_argument('target', type=Path)
    parser.add_argument('--verbose', action='store_true')

    args = parser.parse_args()
    target: Path = args.target.resolve()

    if not target.is_dir():
        raise NotADirectoryError(target)

    return {'target': target, 'verbose': args.verbose}


def format_size(size: float) -> str:
    for unit in ('Bytes', 'KB', 'MB', 'GB', 'TB'):
        if abs(size) < 1024.0:
            return f'{size:3.1f}{unit}'
        size /= 1024.0
    return f'{size:.1f}PB'


def get_video_stream(streams: list[dict[str, Any]]) -> VideoStream | None:
    for stream in streams:
        if not isinstance(stream, dict):
            raise ValueError(f'Not a dict: {stream}')
        codec_type = stream.get('codec_type')
        if codec_type != 'video':
            continue
        return VideoStream(
            codec_name=get_property(stream, 'codec_name', str),
            codec_long_name=get_property(stream, 'codec_long_name', str),
            codec_type=codec_type,
            duration_ms=int(float(stream['duration']) * 1000),
            height=get_property(stream, 'height', int),
            width=get_property(stream, 'width', int),
        )
    return None


def get_video_info(filepath: Path) -> VideoInfo:
    cmd = f'ffprobe -v warning -print_format json -show_streams "{filepath}"'
    result = run(cmd, capture_output=True, text=True, shell=True)
    try:
        try:
            result.check_returncode()
        except CalledProcessError as err:
            if result.stderr:
                log(result.stderr, level='ERROR')
            raise err

        output = json.loads(result.stdout)

        if not isinstance(output, dict):
            log(f'Command Output: {output}', level='ERROR')
            raise ValueError(f"Unexpected output for command '{cmd}': expected dict")

        streams = output.get('streams')
        if not isinstance(streams, list):
            log(f'Streams: {streams}', level='ERROR')
            raise ValueError('Unexpected value for streams: expected list')

        stream = get_video_stream(streams)
        if stream is None:
            log(f'Streams: {streams}', level='ERROR')
            raise RuntimeError('Failed to find video stream')

        encoding: Encoding
        if stream.codec_name == 'h264':
            encoding = 'H.264'
        elif stream.codec_name == 'hevc':
            encoding = 'H.265'
        else:
            encoding = 'UNKNOWN'
        return VideoInfo(
            duration_ms=stream.duration_ms,
            encoding=encoding,
            filepath=filepath,
            height=stream.height,
            width=stream.width,
        )

    except Exception as err:
        raise RuntimeError(f'Failed to get video info for file {filepath}') from err


class ProgressServer:
    reference_duration_ms: int | None
    port = 8637

    def __init__(self) -> None:
        self.address = ('127.0.0.1', self.port)
        self.reference_duration_ms = None
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    def kill(self) -> None:
        self.server.close()

    def start(self) -> None:
        with self.server as server:
            server.bind(self.address)
            server.listen(1)
            ip, port = server.getsockname()
            self._port = port
            log(f'Progress server listening on {ip}:{port}')
            connection, client_address = server.accept()
            with connection:
                self._handle_client(connection, client_address)

    def _handle_client(self, connection: socket.socket, address: Address) -> None:
        ip, port = address
        log(f'Received connection from address: {ip}:{port}', level='VERBOSE')

        self._receive_headers(connection)
        # log(headers.decode().strip())

        data = b''
        while True:
            chunk_size = self._receive_chunk_size(connection)
            if chunk_size == 0:
                break
            chunk_data = self._receive_chunk_data(connection, chunk_size)
            data += chunk_data
            self._print_data(chunk_data)

    def _print_data(self, data: bytes) -> None:
        if self.reference_duration_ms is None:
            log('Reference duration is None', level='WARNING')
            return None
        text = data.decode().strip()
        match = re.search(r'out_time_us=(\d+)', text)
        if match:
            out_time_ms = int(match.group(1)) / 1000
            progress = f'{round((out_time_ms / self.reference_duration_ms) * 100, 2)}%'
        else:
            progress = 'N/A'
        log(f'Progress: {progress}')

    def _receive_headers(self, connection: socket.socket) -> bytes:
        headers = b''
        while not headers.endswith(b'\r\n\r\n'):
            headers += connection.recv(1)
        return headers

    def _receive_chunk_size(self, connection: socket.socket) -> int:
        chunk_size_line = b''
        while not chunk_size_line.endswith(b'\r\n'):
            chunk_size_line += connection.recv(1)
        return int(chunk_size_line.strip(), 16)

    def _receive_chunk_data(self, connection: socket.socket, chunk_size: int) -> bytes:
        chunk_data = connection.recv(chunk_size + 2)
        return chunk_data[:-2]


class VideoOptimizer:
    def __init__(self, video_info: VideoInfo, progress_server_url: str):
        self._video_info = video_info
        self.progress_server_url = progress_server_url

    def optimize_video(self) -> None:
        input_file = self._video_info.filepath
        log(f'Optimizing video: {input_file}')
        input_size = os.path.getsize(input_file)
        tmp_dir = mkdtemp()
        log(f'Created directory: {tmp_dir}', level='VERBOSE')
        try:
            output_file = os.path.join(tmp_dir, 'output.mp4')
            cmd = f'ffmpeg -i "{input_file}" -v warning -preset fast -vcodec libx265 -crf 28 -tag:v hvc1 -progress "{self.progress_server_url}" -nostats "{output_file}"'

            result = run(cmd, capture_output=True, text=True, shell=True)

            try:
                result.check_returncode()
            except CalledProcessError as err:
                if result.stderr:
                    log(result.stderr, level='ERROR')
                raise err

            if not os.path.isfile(output_file):
                raise FileNotFoundError(f'Expected file to exist: {output_file}')
            log(f'Created file: {output_file}', level='VERBOSE')

            output_size = os.path.getsize(output_file)
            if output_size == 0:
                raise RuntimeError(f'Output file is empty: {output_file}')

            os.remove(input_file)
            shutil.move(output_file, input_file)

            diff = round(((output_size - input_size) / input_size) * 100, 1)
            if output_size > input_size:
                log(f'WARNING: Output file size exceeds input file size (+{diff}%)', level='WARNING')
            else:
                log(f'Done! Output filesize: {format_size(output_size)} ({diff}%)')

        except Exception as err:
            raise RuntimeError(f'Failed to optimize video: {input_file}') from err
        finally:
            if os.path.isdir(tmp_dir):
                shutil.rmtree(tmp_dir)


def main() -> None:
    log(f'Optimizing media in target directory: {ARGS['target']}')
    for root, _, files in os.walk(ARGS['target']):
        videos_to_optimize: list[VideoInfo] = []
        for filename in files:
            filepath = Path(os.path.join(ARGS['target'], root, filename))
            if filepath.suffix in VIDEO_EXTENSIONS:
                log(f'Found video: {filepath}', level='VERBOSE')
                video_info = get_video_info(filepath)
                if video_info.encoding != 'H.265':
                    videos_to_optimize.append(video_info)

    log(f'Found {len(videos_to_optimize)} video(s) to optimize')
    log(*[' ' * 4 + f'{video.filepath}' for video in videos_to_optimize], level='VERBOSE')

    progress_server = ProgressServer()
    progress_server_thread = Thread(daemon=True, target=progress_server.start)

    def handle_thread_exception(arg: Any) -> None:
        thread: Thread = arg.thread
        if thread.name == 'VideoOptimizer':
            progress_server.kill()

    threading.excepthook = handle_thread_exception

    for index, video in enumerate(videos_to_optimize):
        log(f'{'-' * 5} VIDEO {index + 1}/{len(videos_to_optimize)} {'-' * 5}')
        progress_server.reference_duration_ms = video.duration_ms
        video_optimizer = VideoOptimizer(video, progress_server_url=f'http://localhost:{progress_server.port}')
        video_optimizer_thread = Thread(daemon=True, name='VideoOptimizer', target=video_optimizer.optimize_video)
        progress_server_thread.start()
        video_optimizer_thread.start()
        video_optimizer_thread.join()
        progress_server_thread.join()


if __name__ == '__main__':
    ARGS = parse_args()
    main()
